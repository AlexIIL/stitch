apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		jcenter()
	}
}

sourceCompatibility = 1.8

def ENV = System.getenv()
version = version + (System.getenv("GITHUB_ACTIONS") ? "" : "+local")

group = 'org.quiltmc'
archivesBaseName = project.name.toLowerCase()

repositories {
	mavenCentral()

	maven {
		url = "https://maven.quiltmc.org/repository/release/"
	}

//	maven {
//		url = "https://maven.fabricmc.net/"
//		content {
//			includeGroup("net.fabricmc") // I'd like to deprecate procyon, so we don't need to maintain it
//		}
//	}
}

configurations {
	ship
	enigma
	implementation.extendsFrom ship
	compileOnly.extendsFrom enigma
	testImplementation.extendsFrom enigma
}

dependencies {
	ship 'org.ow2.asm:asm:8.0'
	ship 'org.ow2.asm:asm-commons:8.0'
	ship 'org.ow2.asm:asm-tree:8.0'
	ship 'org.ow2.asm:asm-util:8.0'
	ship 'org.quiltmc:tiny-mappings-parser:0.3.0'
	implementation 'com.google.guava:guava:28.0-jre'
	compileOnly group: 'org.checkerframework', name: 'checker-qual', version: '2.5.7'
	// enigma 'cuchaz:enigma:0.23.2'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

// TODO: Add license handling so we can build in PRC
// apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/license.gradle'

jar {
	manifest {
		attributes 'Implementation-Title': 'Stitch',
				'Implementation-Version': version,
				'Main-Class': "net.fabricmc.stitch.Main"
	}
}

task allJar(type: Jar) {
	from {
		configurations.ship.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	manifest {
		attributes 'Implementation-Title': 'Stitch',
				'Implementation-Version': version,
				'Main-Class': "net.fabricmc.stitch.Main"
	}
	classifier = 'all'
	with jar
}

artifacts {
	archives allJar
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact(allJar)
		}
	}

	// select the repositories you want to publish to
	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

test {
	useJUnitPlatform()
}
